// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'rx_handlers.dart';
part 'input_handler.freezed.dart';

// These functions are ignored because they are not marked as `pub`: `capture_task`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `fmt`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<InputHandler>>
abstract class InputHandler implements RustOpaqueInterface {
  Future<(PositionVecU8Sender, PositionVecU8Receiver)> createPositionStream();

  factory InputHandler() =>
      RustLib.instance.api.crateApiInputHandlerInputHandlerNew();

  Future<void> run({required PositionVecU8Sender positionStream});

  Future<void> sendCaptureRequest({required CaptureRequest request});

  Future<void> stop();
}

@freezed
sealed class CaptureRequest with _$CaptureRequest {
  const CaptureRequest._();

  const factory CaptureRequest.release() = CaptureRequest_Release;
  const factory CaptureRequest.create(
    Position field0,
  ) = CaptureRequest_Create;
  const factory CaptureRequest.destroy(
    Position field0,
  ) = CaptureRequest_Destroy;
}

enum Position {
  left,
  right,
  top,
  bottom,
  ;
}
